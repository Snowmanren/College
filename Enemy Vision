ng UnityEngine;
using System.Collections;

public class EnemyPathway2D : MonoBehaviour
{
    public Vector2[] waypoints;  // List of target positions (use Vector2 for 2D)
    public float speed = 1.0f;    // Movement speed
    public float waitTime = 2.0f; // Time to wait at each waypoint
    public float rotationSpeed = 5.0f; // Speed of rotation (how fast it turns to face the direction)

    private int currentWaypointIndex = 0; // Current target waypoint
    private bool isWaiting = false;       // Tracks if the enemy is waiting

    private void Update()
    {
        if (waypoints.Length == 0 || isWaiting) return; // Exit if no waypoints are set or enemy is waiting

        // Get the current target waypoint
        Vector2 targetPosition = waypoints[currentWaypointIndex];

        // Move the enemy towards the target
        Vector2 direction = targetPosition - (Vector2)transform.position;
        float distance = direction.magnitude;

        if (distance > 0.1f) // If not close enough to the target
        {
            // Normalize the direction
            direction.Normalize();

            // Rotate towards the direction of movement
            if (direction != Vector2.zero)
            {
                float targetAngle = Mathf.Atan2(direction.y, direction.x) * Mathf.Rad2Deg + -90;
                float currentAngle = transform.rotation.eulerAngles.z;

                // Smooth rotation to face the direction
                float angle = Mathf.LerpAngle(currentAngle, targetAngle, rotationSpeed * Time.deltaTime);
                transform.rotation = Quaternion.Euler(0f, 0f, angle);
            }

            // Move the enemy forward
            transform.position = Vector2.MoveTowards(transform.position, targetPosition, speed * Time.deltaTime);
        }
        else
        {
            // Snap to the target position and start waiting
            transform.position = targetPosition;
            StartCoroutine(WaitAtWaypoint());
        }
    }

    private IEnumerator WaitAtWaypoint()
    {
        isWaiting = true; // Prevent further movement during wait
        yield return new WaitForSeconds(waitTime); // Wait for the specified duration

        // Move to the next waypoint
        currentWaypointIndex++;
        if (currentWaypointIndex >= waypoints.Length)
        {
            currentWaypointIndex = 0; // Optional: Loop back to the first waypoint
        }

        isWaiting = false; // Resume movement
    }
}
