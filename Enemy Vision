using UnityEngine;

public class VisionCone2D : MonoBehaviour
{
    [Header("Enemy Vision Settings")]
    public Transform player; // The player's transform
    public float fieldOfViewAngle = 90f; // Field of view angle in degrees
    public float visionRange = 10f; // Maximum range of the vision cone

    void Update()
    {
        if (IsPlayerInVisionCone())
        {
            Debug.Log("Player is in vision cone!");
            // Trigger your event here (e.g., alert the enemy)
        }
        else
        {
            Debug.Log("Player is NOT in vision cone.");
        }
    }

    private bool IsPlayerInVisionCone()
    {
        // Calculate the vector from the enemy to the player (2D, only X and Y)
        Vector2 directionToPlayer = (player.position - transform.position);

        // Check if the player is within vision range (ignores Z-axis)
        if (directionToPlayer.magnitude > visionRange)
            return false;

        // Normalize the direction vector (ignore Z-axis)
        directionToPlayer.Normalize();

        // Get the enemy's forward direction in 2D based on rotation
        Vector2 enemyForward = transform.up; // Use transform.up to get forward direction considering rotation

        // Calculate the dot product between the enemy's forward direction and the direction to the player
        float dotProduct = Vector2.Dot(enemyForward, directionToPlayer);

        // Calculate the angle between the two vectors (in degrees)
        float angle = Mathf.Acos(dotProduct) * Mathf.Rad2Deg;

        // Check if the angle is within half the field of view
        return angle <= fieldOfViewAngle / 2;
    }

    private void OnDrawGizmos()
    {
        // Draw the vision cone in the Scene view for debugging
        Gizmos.color = new Color(1, 0, 0, 0.3f);

        // Create vectors for the left and right boundaries of the vision cone
        Vector2 leftBoundary = Quaternion.Euler(0, 0, -fieldOfViewAngle / 2) * transform.up;
        Vector2 rightBoundary = Quaternion.Euler(0, 0, fieldOfViewAngle / 2) * transform.up;

        // Draw lines representing the vision cone boundaries
        Gizmos.DrawLine(transform.position, transform.position + (Vector3)leftBoundary * visionRange);
        Gizmos.DrawLine(transform.position, transform.position + (Vector3)rightBoundary * visionRange);
        Gizmos.DrawWireSphere(transform.position, visionRange);
    }
}
